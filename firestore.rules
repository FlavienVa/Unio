rules_version = '2';

// Read rules can be divided into get and list rules
// Write rules can be divided into create, update, and delete rules

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }
    function isVerified() {
      return isSignedIn() && request.auth.token.email_verified;
    }

    match /users/{uid} {
      function isOwner() {
        return isVerified() && request.auth.uid == uid;
      }
      function validateJoinedAssociations() {
        // Prevent the user from changing the joinedAssociations field
        // This will be handled by a Firebase Function
        return request.resource.data.joinedAssociations == resource.data.joinedAssociations;
      }
      function validate() {
        return request.resource.data.uid == request.auth.uid &&
          request.resource.data.email == request.auth.token.email &&
          request.resource.data.firstName is string &&
          request.resource.data.lastName is string &&
          request.resource.data.biography is string &&
          request.resource.data.savedEvents is list &&
          request.resource.data.followedAssociations is list &&
          request.resource.data.joinedAssociations is list &&
          request.resource.data.interests is list &&
          request.resource.data.socials is list &&
          request.resource.data.profilePicture is string;
      }

      allow get: if isVerified();
      allow create: if isOwner() && validate();
      allow delete: if isOwner();
      allow update: if isOwner() && validateJoinedAssociations() && validate();
    }

    match /associations/{uid} {
      function isMember() {
        return isVerified() && get(/databases/$(database)/documents/associations/$(uid)).data.members.hasAny([request.auth.uid]);
      }
      function onlyUpdatedFollowerCount() {
        let newCount = request.resource.data.followersCount;
        let oldCount = resource.data.followersCount;

        let affectedKeys = request.resource.data.diff(resource.data).affectedKeys();
        let onlyFollowerCountChanged = affectedKeys.hasOnly(['followersCount']);

        return onlyFollowerCountChanged && (newCount == oldCount || newCount == oldCount + 1 || newCount == oldCount - 1);
      }
      function validate() {
        return request.resource.data.uid == uid &&
          request.resource.data.url == uid &&
          request.resource.data.name is string &&
          request.resource.data.fullName is string &&
          request.resource.data.category is string &&
          request.resource.data.description is string &&
          request.resource.data.followersCount is int &&
          request.resource.data.followersCount >= 0 &&
          request.resource.data.members is list &&
          request.resource.data.image is string &&
          request.resource.data.events is list;
      }

      allow read: if isVerified();
      // Allow update if the user is a member of the association or if the changed data is the followersCount field
      allow update: if isVerified() &&
          ((isMember() || onlyUpdatedFollowerCount())) && validate();
    }

    match /events/{uid} {
      function isEventOrganiser() {
        // This assumes the event document already exists
        return isVerified() && resource.data.organisers.hasAny(
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.joinedAssociations
        );
      }
      function canCreateEvent() {
        return isVerified() && request.resource.data.organisers.hasAny(
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.joinedAssociations
        );
      }
      function validate() {
        return request.resource.data.uid == uid &&
          request.resource.data.title is string &&
          request.resource.data.organisers is list &&
          request.resource.data.taggedAssociations is list &&
          request.resource.data.image is string &&
          request.resource.data.description is string &&
          request.resource.data.catchyDescription is string &&
          request.resource.data.price is number &&
          request.resource.data.price >= 0 &&
          request.resource.data.date is timestamp &&
          request.resource.data.location is map &&
          request.resource.data.location.latitude is number &&
          request.resource.data.location.longitude is number &&
          request.resource.data.location.name is string &&
          request.resource.data.types is list;
      }

      allow read: if isVerified();
      allow create: if canCreateEvent() && validate();
      allow update: if isEventOrganiser() && validate();
      allow delete: if isEventOrganiser();
    }
  }
}